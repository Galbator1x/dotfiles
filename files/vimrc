setglobal nocompatible

if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" General
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch' " Asynchronous build and test dispatcher
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'janko-m/vim-test'
Plug '907th/vim-auto-save'
Plug 'wellle/targets.vim'

" Search and navigation
Plug 'dyng/ctrlsf.vim' " Powered code search and view tool
" Plug 'mileszs/ack.vim' " Search tool (need to install ack-grep)
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'godlygeek/tabular' " Text filtering and alignment
" Plug 'tpope/vim-projectionist' " Provides granular project configuration

" Autocomplete
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-unimpaired'
Plug 'reedes/vim-lexical' " Build on Vim’s spell/thes/dict completion
" Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-tabnine',
      \ 'coc-cspell-dicts',
      \ 'coc-spell-checker',
      \ 'coc-html',
      \ 'coc-lists',
      \ 'coc-sh',
      \ 'coc-css',
      \ 'coc-stylelint',
      \ 'coc-vimlsp',
      \ 'coc-json',
      \ 'coc-eslint',
      \ 'coc-solargraph',
      \ 'coc-yaml',
      \ 'coc-highlight',
      \ 'coc-docker',
      \ 'coc-diagnostic',
      \ 'coc-prettier',
      \ 'coc-git',
      \]

" Advanced
Plug 'vim-airline/vim-airline' " status/tabline
Plug 'majutsushi/tagbar' " F8. Displays tags in a window, ordered by scope
Plug 'mbbill/undotree' " The ultimate undo history visualizer
Plug 'Valloric/MatchTagAlways' " Always highlight enclosing tags
" Plug 'Shougo/vimproc.vim' " Interactive command execution in Vim
Plug 'shime/vim-livedown', { 'for': 'markdown' }
" Plug 'joonty/vdebug', { 'on': 'VdebugStart' } " Multi-language DBGP debugger client
Plug 'xolox/vim-misc' " Miscellaneous auto-load Vim scripts
" Plug 'xolox/vim-easytags' " Automated tag file generation and syntax highlighting of tags
" Plug 'Shougo/vimshell.vim' " Powerful shell implemented by vim
" Plug 'SirVer/ultisnips' "The ultimate snippet solution for Vim
Plug 'skywind3000/asyncrun.vim' " Run Async Shell Commands
Plug 'editorconfig/editorconfig-vim' " http://editorconfig.org/
Plug 'lxhillwind/leader-clipboard'
Plug 'michaeljsmith/vim-indent-object'

" Languages support
Plug 'othree/html5.vim' " HTML5 omnicomplete and syntax
" Plug 'tpope/vim-haml', { 'for': 'haml' } " Vim runtime files for Haml, Sass, and SCSS
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'tmux-plugins/vim-tmux'
Plug 'lepture/vim-jinja', { 'for': 'jinja' }
Plug 'fatih/vim-go'
Plug 'elzr/vim-json' " A better JSON for Vim: distinct highlighting of keywords vs values
Plug 'stephpy/vim-yaml', { 'for': 'yaml' }
Plug 'chrisbra/csv.vim', { 'for': 'csv' }
Plug 'ekalinin/Dockerfile.vim'
Plug 'tpope/vim-ragtag' " A set of mappings for HTML...
Plug 'mattn/emmet-vim'
Plug 'chr4/nginx.vim'
Plug 'hashivim/vim-terraform'
" Plug 'digitaltoad/vim-pug', { 'for': 'pug' }
Plug 'slim-template/vim-slim', { 'for': ['slim', 'slime'] }

" Python
" Plug 'python-mode/python-mode'
Plug 'nvie/vim-flake8'

" Ruby
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-endwise'
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-rvm'
Plug 'p0deje/vim-ruby-interpolation'
" Plug 'sunaku/vim-ruby-minitest' " highlighting & completion for MiniTest

" Elixir
Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'c-brenn/phoenix.vim', { 'for': 'elixir' }

" Clojure
" Plug 'guns/vim-clojure-highlight'
" Plug 'guns/vim-clojure-static'
" Plug 'guns/vim-slamhound'
" Plug 'tpope/vim-leiningen'
" Plug 'tpope/vim-classpath' " Set 'path' from the Java class path
" Plug 'tpope/vim-fireplace' " Clojure REPL support
" Plug 'tpope/vim-salve' " static support for Leiningen and Boot
" Plug 'venantius/vim-eastwood' " Clojure's Eastwood linter
" Plug 'venantius/vim-cljfmt'
" Plug 'vim-scripts/paredit.vim', { 'for': ['clojure', 'scheme', 'racket'] }
" Plug 'jpalardy/vim-slime' " to turn Emacs into a Lisp IDE
Plug 'wlangstroth/vim-racket', { 'for': 'racket' }

" JavaScript
Plug 'pangloss/vim-javascript' " Vastly improved Javascript indentation and syntax
Plug 'mxw/vim-jsx' " React JSX syntax highlighting and indenting
" Plug 'mtscout6/vim-cjsx'
" Plug 'flowtype/vim-flow'
" Plug 'moll/vim-node' " Tools and environment to make Vim superb for developing with Node.js
" Plug 'benjie/neomake-local-eslint.vim'
" Plug 'ternjs/tern_for_vim'
" Plug 'chemzqm/vim-jsx-improve', { 'for': 'javascript' }
Plug 'kchmck/vim-coffee-script'

" Themes
Plug 'nanotech/jellybeans.vim'
Plug 'iCyMind/NeoSolarized'
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline-themes'

" Other
" rhysd/vim-clang-format " for clang-format, a formatter for JavaScript,...
Plug 'ConradIrwin/vim-bracketed-paste' " need modern terminal like iTerm2
" Plug 'nathanaelkane/vim-indent-guides' " visually displaying indent levels in code

call plug#end()
" filetype plugin indent on

let g:python_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3.6'

let mapleader = "\<Space>"

" https://github.com/vim/vim/blob/master/runtime/doc/russian.txt
" Enable hotkeys for Russian layout
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" Sets how many lines of history VIM has to remember
set history=500

if has('mouse')
  set mouse=a
endif

" Don't redraw while executing macros (good performance config)
set lazyredraw
set ttyfast

set shortmess+=c
set updatetime=300

set cursorline
set hidden
set nofoldenable
set nowrap
set linebreak
set number
set hlsearch
set ignorecase
set smartcase

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

set showcmd       " display incomplete commands

set expandtab
set softtabstop=2
set shiftwidth=2

set splitbelow
set scrolloff=3

" colorscheme jellybeans
colorscheme NeoSolarized
" colorscheme gruvbox

set termguicolors
set background=light
let g:airline_theme='solarized'

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

""" Basics Keymaps

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with line wrapping on, this can cause the cursor to actually skip a few lines on the screen because it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down' to mean the next line on the screen
nmap j gj
nmap k gk

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" Edit .vimrc
map <leader>vl :vsp $MYVIMRC<CR>
map <leader>vr :source $MYVIMRC<CR>

" Toggle paste mode TODO replace by plugin
" nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
" imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
" nnoremap ff :normal! gg=G``<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

nmap <silent> // :nohlsearch<CR>

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" set text wrapping toggles
nmap <silent> <leader>w :set invwrap<CR>:set wrap?<CR>

""" Plugins Keymaps

nmap <C-m> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>

nnoremap <leader>b :Buffers<CR>

inoremap <expr> <C-j> pumvisible() ? "\<C-N>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-P>" : "\<C-k>"

map <leader>m :LivedownToggle<CR>

map <leader>a :call RunAllSpecs()<CR>

noremap <leader>/ :set hlsearch! hlsearch?<CR>
noremap <leader>= :Tabularize /=<CR>
noremap <leader>: :Tabularize /:\zs<CR>
" nnoremap <leader>fc :Commits<CR>

nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

""" Plugin Settings

" let g:LanguageClient_autoStart = 1

" let g:LanguageClient_serverCommands = {
"       \ 'ruby': ['solargraph', 'stdio'],
"       \ }

let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toc_autofit = 1
let g:lexical#spelllang = ['en_us', 'ru_ru']

let g:vim_markdown_folding_disabled = 1

" nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" nnoremap <F5> :call LanguageClient_contextMenu()<CR>

nmap <F8> :TagbarToggle<CR>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

let NERDTreeIgnore = ['.git', '\.pyc$', '\.retry$', '^activate', '^easy_install', '^pip$', '^pip3', '^python$', '^python3', '__pycache__', '^flask$', '.ropeproject', '.cache', '.DS_Store', '.docker-sync', '.bundle', '.keep',]
let NERDTreeShowHidden=1

" Allows you to enter sudo pass and save the file
" " when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %

" Blockwise Visual
command! Vb normal! <C-v>
map <leader>vb :Vb<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

nmap <C-p> :Files<CR>

autocmd BufWritePre * :%s/\s\+$//e

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif

let g:auto_save = 1  " enable AutoSave on Vim startup
let g:auto_save_silent = 1  " do not display the auto-save notification
let g:auto_save_events = ["InsertLeave", "TextChanged"]

let g:livedown_autorun = 0
let g:livedown_open = 1

autocmd FileType python setlocal ts=4 sts=4 sw=4 et

autocmd FileType python nnoremap <Leader>i :!isort %<CR><CR>

set completeopt=noinsert,menuone,noselect

" { Vim-test
    let test#strategy = "dispatch"
    let test#python#runner = 'pytest'

    nmap <silent> <leader>rt :TestSuite<CR>
    nmap <silent> <leader>rf :TestFile<CR>
    nmap <silent> <leader>rn :TestNearest<CR>
    nmap <silent> <leader>rr :TestLast<CR>
    nmap <silent> <leader>g :TestVisit<CR>
" }

" { Quick run via <F5>
    " nnoremap <F5> :call <SID>compile_and_run()<CR>

    " augroup SPACEVIM_ASYNCRUN
    "     autocmd!
    "     " Automatically open the quickfix window
    "     autocmd User AsyncRunStart call asyncrun#quickfix_toggle(6, 1)
    " augroup END

    " function! s:compile_and_run()
    "     exec 'w'
    "     if &filetype == 'sh'
    "        exec "AsyncRun! time bash %"
    "     elseif &filetype == 'python'
    "        exec "AsyncRun! python3 %"
    "     endif
    " endfunction
" }

nnoremap <leader>fh :vertical resize 30<CR>
nnoremap <leader>fj :vertical resize 50<CR>
nnoremap <leader>fk :vertical resize 75<CR>
nnoremap <leader>fl :vertical resize 90<CR>
nnoremap <leader>fn :vertical resize 105<CR>
nnoremap <leader>fm :vertical resize 120<CR>
nnoremap <silent> <leader>q :close<CR>

autocmd FileType python map <buffer> <F3> :call Flake8()<CR>

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'

" TODO: fix segmentation fault
" command! -bang -nargs=? -complete=dir GFiles
"       \ call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(), <bang>0)

" command! -bang -nargs=? -complete=dir Files
"       \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

fun! DetectTemplate()
  let n = 1
  while n < line("$")
    if getline(n) =~ '{%' || getline(n) =~ '{{'
      set ft=htmldjango
      return
    endif
    let n = n + 1
  endwhile
  set ft=html "default html
endfun
autocmd BufNewFile,BufRead *.html call DetectTemplate()

" visual selection search via *
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

augroup filetypedetect
  au BufEnter *.py setl ts=4 sw=4 sts=4
augroup END

""" COC

vmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

"let g:coc_snippet_next = '<tab>'

"" Use <C-l> for trigger snippet expand.
"imap <C-l> <Plug>(coc-snippets-expand)
""
"" " Use <C-j> for select text for visual placeholder of snippet.
"vmap <C-j> <Plug>(coc-snippets-select)

"" Use <C-j> for both expand and jump (make expand higher priority.)
"imap <C-j> <Plug>(coc-snippets-expand-jump)

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" " Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" " Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

"" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

"" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

map <leader>f  :CocCommand prettier.formatFile<CR>

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

"" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
" nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

"" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

"" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
